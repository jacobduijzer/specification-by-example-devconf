// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BowlingGame.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MultipleBowlingGamesFeature : object, Xunit.IClassFixture<MultipleBowlingGamesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MultipleBowlingGames.feature"
#line hidden
        
        public MultipleBowlingGamesFeature(MultipleBowlingGamesFeature.FixtureData fixtureData, BowlingGame_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Multiple Bowling Games", "As a player\nI want to calculate my scores\nSo I know if I am winning", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
    #line hidden
#line 7
        testRunner.Given("Janine is playing a game of bowling", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A poor game")]
        [Xunit.TraitAttribute("FeatureTitle", "Multiple Bowling Games")]
        [Xunit.TraitAttribute("Description", "A poor game")]
        public void APoorGame()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A poor game", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round",
                            "Roll 1",
                            "Roll 2"});
                table1.AddRow(new string[] {
                            "1",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "2",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "3",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "4",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "5",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "6",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "7",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "8",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "9",
                            "1",
                            "1"});
                table1.AddRow(new string[] {
                            "10",
                            "1",
                            "1"});
#line 10
        testRunner.When("she scores the following", ((string)(null)), table1, "When ");
#line hidden
#line 22
        testRunner.Then("her total score should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A game with a strike")]
        [Xunit.TraitAttribute("FeatureTitle", "Multiple Bowling Games")]
        [Xunit.TraitAttribute("Description", "A game with a strike")]
        public void AGameWithAStrike()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A game with a strike", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round",
                            "Roll 1",
                            "Roll 2"});
                table2.AddRow(new string[] {
                            "1",
                            "10",
                            "x"});
                table2.AddRow(new string[] {
                            "2",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "3",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "4",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "5",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "6",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "7",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "8",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "9",
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "10",
                            "1",
                            "1"});
#line 25
        testRunner.When("she scores the following", ((string)(null)), table2, "When ");
#line hidden
#line 37
        testRunner.Then("her total score should be 30", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A game with a spare")]
        [Xunit.TraitAttribute("FeatureTitle", "Multiple Bowling Games")]
        [Xunit.TraitAttribute("Description", "A game with a spare")]
        public void AGameWithASpare()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A game with a spare", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round",
                            "Roll 1",
                            "Roll 2"});
                table3.AddRow(new string[] {
                            "1",
                            "0",
                            "10"});
                table3.AddRow(new string[] {
                            "2",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "3",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "4",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "5",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "6",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "7",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "8",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "9",
                            "1",
                            "1"});
                table3.AddRow(new string[] {
                            "10",
                            "1",
                            "1"});
#line 40
        testRunner.When("she scores the following", ((string)(null)), table3, "When ");
#line hidden
#line 52
        testRunner.Then("her total score should be 29", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The perfect game")]
        [Xunit.TraitAttribute("FeatureTitle", "Multiple Bowling Games")]
        [Xunit.TraitAttribute("Description", "The perfect game")]
        public void ThePerfectGame()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The perfect game", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round",
                            "Roll 1",
                            "Roll 2"});
                table4.AddRow(new string[] {
                            "1",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "2",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "3",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "4",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "5",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "6",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "7",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "8",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "9",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "10",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "11",
                            "10",
                            "x"});
                table4.AddRow(new string[] {
                            "12",
                            "10",
                            "x"});
#line 55
        testRunner.When("she scores the following", ((string)(null)), table4, "When ");
#line hidden
#line 69
        testRunner.Then("her total score should be 300", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MultipleBowlingGamesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MultipleBowlingGamesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
